#!/bin/bash

# Usage: ./find_active_hosts.sh <network_interface>

if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <network_interface>"
    exit 1
fi

INTERFACE=$1
PORTS=(21 22 23 80 137 138 139 443 445 5000 8080) # List of ports to check

# Get the network range for the specified interface
NETWORK=$(ip -4 addr show $INTERFACE | grep -oP "(?<=inet\s)\d+(\.\d+){3}/\d+")
if [ -z "$NETWORK" ]; then
    echo "Error: Could not determine the network range for interface $INTERFACE"
    exit 1
fi

IFS=. read -r i1 i2 i3 i4 <<< "$(echo $NETWORK | cut -d'/' -f1)"
PREFIX=$(echo $NETWORK | cut -d'/' -f2)

# Calculate the network address and broadcast address
NETWORK_ADDR=$(( (i1 << 24) + (i2 << 16) + (i3 << 8) + (i4 & ~((1 << (32 - PREFIX)) - 1)) ))
BROADCAST_ADDR=$(( NETWORK_ADDR | ((1 << (32 - PREFIX)) - 1) ))

# Scan for active hosts
total_ips=$((BROADCAST_ADDR - NETWORK_ADDR - 1))
current_ip=0

for ip in $(seq $((NETWORK_ADDR + 1)) $((BROADCAST_ADDR - 1))); do
    current_ip=$((current_ip + 1))
    host=$(printf "%d.%d.%d.%d" $((ip >> 24 & 255)) $((ip >> 16 & 255)) $((ip >> 8 & 255)) $((ip & 255)))
    echo "Scanning $host ($current_ip/$total_ips)..."
    for port in "${PORTS[@]}"; do
        if timeout 1 bash -c "echo >/dev/tcp/$host/$port" 2>/dev/null; then
            echo "Host $host has port $port open"
        fi
    done
done

echo "Scanning complete."
